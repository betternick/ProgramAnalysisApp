plugins {
    // Add support for building a CLI application in Java.
    id 'application'
    // Test coverage
    id 'jacoco'
    id 'java'
    // Spring Boot plugin to simplify working with Spring applications
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
}

jacoco {
    toolVersion = "0.8.11" // Specify JaCoCo version
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

configurations {
    agentCompile.extendsFrom implementation
}

dependencies {
    // Byte Buddy to monitor the exection 
    implementation 'net.bytebuddy:byte-buddy:1.14.12'
    implementation 'net.bytebuddy:byte-buddy-agent:1.14.12'

    // direct access to ASM, not just through Byte Buddy
    implementation 'org.ow2.asm:asm:9.6'
    implementation 'org.ow2.asm:asm-commons:9.6'

    // Spoon is a library to analyze and transform Java source code.
    implementation 'fr.inria.gforge.spoon:spoon-core:10.4.1'

    // JSON serialization and deserialization.
    implementation 'org.json:json:20240303'

    // Use Log4j for logging.
    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'
    implementation 'org.apache.logging.log4j:log4j-api:2.23.1'

    // Use Pair
    implementation 'org.apache.commons:commons-lang3:3.14.0'

    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Spring Boot 
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation "org.springframework.boot:spring-boot-starter-web" 
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    sourceCompatibility = '17'
    // toolchain {
    //     languageVersion = JavaLanguageVersion.of(21)
    // }
}

sourceSets {
    agent {
        java {
            srcDir 'src/main/java'
            include '**/profile/ProfilingAgent.java'
            include '**/profile/Log.java'
            include '**/graph/*.java'
        }
        resources {
            srcDir 'src/main/resources'
        }
        compileClasspath += configurations.agentCompile
    }
}

task agentJar(type: Jar) {
    archiveClassifier = 'agent'
    from sourceSets.agent.output
    manifest {
        attributes(
            'Premain-Class': 'org.profile.ProfilingAgent',
            'Can-Redefine-Classes': true,
            'Can-Retransform-Classes': true,
            'Agent-Class': 'org.profile.ProfilingAgent'
        )
    }
}

build.dependsOn agentJar

application {
    // Define the main class for the application.
    mainClass = 'org.servlet.Application'
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    dependsOn test // Ensure test task runs before generating coverage report
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    finalizedBy jacocoTestReport // Generate coverage report after tests
}

